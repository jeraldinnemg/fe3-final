{"ast":null,"code":"var _jsxFileName = \"/Users/jeraldinnemolleda/Documents/Jeraldinne/CTD/bimestre-6/frontend3/MolledaJeraldinne-FrontendParcial/fe3-final/src/Components/utils/global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"light\",\n  data: [],\n  favoritos: [],\n  flag: true\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\n\nconst reducerFunction = (state, action) => {\n  switch (action.type) {\n    case \"THEME\":\n      return { ...state,\n        theme: action.payload\n      };\n\n    case \"DATA\":\n      return { ...state,\n        data: action.payload\n      };\n\n    case \"FAV\":\n      return { ...state,\n        favoritos: action.payload\n      };\n\n    case \"FLAG\":\n      return { ...state,\n        flag: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(reducerFunction, initialState);\n  const theTheme = createTheme({\n    palette: {\n      primary: {\n        main: state.theme === \"light\" ? blue[500] : grey[50]\n      },\n      secondary: {\n        main: green[300]\n      },\n      error: {\n        main: state.theme === \"light\" ? red[500] : red[200]\n      },\n      success: {\n        main: green[100]\n      }\n    }\n  });\n  const store = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: store,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theTheme,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: state.theme,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","initialState","theme","data","favoritos","flag","ContextGlobal","undefined","reducerFunction","state","action","type","payload","ContextProvider","children","dispatch","useReducer","theTheme","createTheme","palette","primary","main","blue","grey","secondary","green","error","red","success","store"],"sources":["/Users/jeraldinnemolleda/Documents/Jeraldinne/CTD/bimestre-6/frontend3/MolledaJeraldinne-FrontendParcial/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext } from \"react\";\n\nexport const initialState = {\n  theme: \"light\", \n  data: [],\n  favoritos: [],\n  flag: true\n}\nexport const ContextGlobal = createContext(undefined);\n\n\nconst reducerFunction = (state, action) => {\n  switch(action.type){\n    case \"THEME\":\n      return {...state, theme: action.payload}\n    case \"DATA\":\n      return {...state, data: action.payload}\n    case \"FAV\":\n      return {...state, favoritos: action.payload}\n    case \"FLAG\":\n      return {...state, flag: action.payload}\n    default:\n      return state;\n  }\n}\n\nexport const ContextProvider = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  const [state, dispatch] = useReducer(reducerFunction, initialState);\n\n  const theTheme = createTheme({\n    palette:{\n      primary: {\n        main: state.theme === \"light\" ? blue[500] : grey[50]\n      },\n      secondary:{\n        main: green[300]\n      },\n      error:{\n        main: state.theme === \"light\" ? red[500] : red[200]\n      },\n      success:{\n        main: green[100]\n      },\n    }\n  });\n\n  const store = {\n    state,\n    dispatch\n  }\n  return (\n    <ContextGlobal.Provider value={store}>\n      <ThemeProvider theme={theTheme}>\n      <div className={state.theme}>\n        {children}\n      </div>\n      </ThemeProvider>\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,OAA9B;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAC1BC,KAAK,EAAE,OADmB;EAE1BC,IAAI,EAAE,EAFoB;EAG1BC,SAAS,EAAE,EAHe;EAI1BC,IAAI,EAAE;AAJoB,CAArB;AAMP,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAACO,SAAD,CAAnC;;AAGP,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACzC,QAAOA,MAAM,CAACC,IAAd;IACE,KAAK,OAAL;MACE,OAAO,EAAC,GAAGF,KAAJ;QAAWP,KAAK,EAAEQ,MAAM,CAACE;MAAzB,CAAP;;IACF,KAAK,MAAL;MACE,OAAO,EAAC,GAAGH,KAAJ;QAAWN,IAAI,EAAEO,MAAM,CAACE;MAAxB,CAAP;;IACF,KAAK,KAAL;MACE,OAAO,EAAC,GAAGH,KAAJ;QAAWL,SAAS,EAAEM,MAAM,CAACE;MAA7B,CAAP;;IACF,KAAK,MAAL;MACE,OAAO,EAAC,GAAGH,KAAJ;QAAWJ,IAAI,EAAEK,MAAM,CAACE;MAAxB,CAAP;;IACF;MACE,OAAOH,KAAP;EAVJ;AAYD,CAbD;;AAeA,OAAO,MAAMI,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,MAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBC,UAAU,CAACR,eAAD,EAAkBP,YAAlB,CAApC;EAEA,MAAMgB,QAAQ,GAAGC,WAAW,CAAC;IAC3BC,OAAO,EAAC;MACNC,OAAO,EAAE;QACPC,IAAI,EAAEZ,KAAK,CAACP,KAAN,KAAgB,OAAhB,GAA0BoB,IAAI,CAAC,GAAD,CAA9B,GAAsCC,IAAI,CAAC,EAAD;MADzC,CADH;MAINC,SAAS,EAAC;QACRH,IAAI,EAAEI,KAAK,CAAC,GAAD;MADH,CAJJ;MAONC,KAAK,EAAC;QACJL,IAAI,EAAEZ,KAAK,CAACP,KAAN,KAAgB,OAAhB,GAA0ByB,GAAG,CAAC,GAAD,CAA7B,GAAqCA,GAAG,CAAC,GAAD;MAD1C,CAPA;MAUNC,OAAO,EAAC;QACNP,IAAI,EAAEI,KAAK,CAAC,GAAD;MADL;IAVF;EADmB,CAAD,CAA5B;EAiBA,MAAMI,KAAK,GAAG;IACZpB,KADY;IAEZM;EAFY,CAAd;EAIA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAEc,KAA/B;IAAA,uBACE,QAAC,aAAD;MAAe,KAAK,EAAEZ,QAAtB;MAAA,uBACA;QAAK,SAAS,EAAER,KAAK,CAACP,KAAtB;QAAA,UACGY;MADH;QAAA;QAAA;QAAA;MAAA;IADA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAnCM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}